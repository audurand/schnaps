<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:gui="graphical_user_interface_info" xmlns:pmt="primitives_info">
	<xsd:annotation>
		<xsd:appinfo>
			<string dictName="Operators"/>
			<int dictPriority="0"/>
			<string dictRequires=""/>
			<string shortDescription="Operators primitives for SCHNAPS"/>
		</xsd:appinfo>
		<xsd:documentation>
		W3C XML Schema for SCHNAPS Simulator files by Audrey Durand, November 2010.
		Primitive structures by Marc-Andre Gardner, March 2010.
		</xsd:documentation>
	</xsd:annotation>
	
	<xsd:include schemaLocation="XSD/BaseTypes.xsd"/>
	
	<xsd:element name="Operators_AbsComplex" substitutionGroup="_unaryOp" type="_unaryOpComplexType">
		<xsd:annotation>
			<xsd:appinfo>
				<pmt:info lang="en">Compute the absolute value of child (number).</pmt:info>
				<pmt:mappedName lang="en">Absolute value (complex)</pmt:mappedName>
			</xsd:appinfo>
		</xsd:annotation>
	</xsd:element>

	<xsd:element name="Operators_AddComplex" substitutionGroup="_binaryOp" type="_binaryOpComplexType">
		<xsd:annotation>
			<xsd:appinfo>
				<pmt:info lang="en">Compute the addition of left and right children (numbers).</pmt:info>
				<pmt:mappedName lang="en">Add (complex)</pmt:mappedName>
			</xsd:appinfo>
		</xsd:annotation>
	</xsd:element>
	
	<xsd:element name="Operators_AddVariable" substitutionGroup="_modifierOp">
		<xsd:annotation>
			<xsd:appinfo>
				<pmt:info lang="en">Compute the addition of left and right numbers. Store the result in a variable.</pmt:info>
				<pmt:mappedName lang="en">Add (result in variable)</pmt:mappedName>
				<pmt:returnType definedBy="staticType">Void</pmt:returnType>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="outResult" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="indVariables" allowEdition="False"/>
							<gui:list type="locVariables" allowEdition="False"/>
						</gui:attributeBehavior>
						<pmt:attributeMappedName lang="en">Variable</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="inArgLeft" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="indVariables" allowEdition="False"/>
							<gui:list type="envVariables" allowEdition="False"/>
							<gui:list type="locVariables" allowEdition="False"/>
							<gui:list type="allParameters" allowEdition="False"/>
							<gui:displayValue position="br" showAttr="inArgRight" delimiter="+"/>		
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en" pairedAttr="inArgLeft_Type"/>
						<pmt:attributeMappedName lang="en">Left number</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="inArgLeft_Type" use="optional">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="numericTypes" allowEdition="False"/>
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en">Type of left argument. WARNING: type must be the same as variable!</pmt:attributeInfo>
						<pmt:attributeMappedName lang="en">Left argument type</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="Int"/>
						<xsd:enumeration value="UInt"/>
						<xsd:enumeration value="Long"/>
						<xsd:enumeration value="ULong"/>
						<xsd:enumeration value="Double"/>
						<xsd:enumeration value="Float"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="inArgRight" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="indVariables" allowEdition="False"/>
							<gui:list type="envVariables" allowEdition="False"/>
							<gui:list type="locVariables" allowEdition="False"/>
							<gui:list type="allParameters" allowEdition="False"/>		
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en" pairedAttr="inArgRight_Type"/>
						<pmt:attributeMappedName lang="en">Right number</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="inArgRight_Type" use="optional">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="numericTypes" allowEdition="False"/>
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en">Type of right argument. WARNING: type must be the same as variable!</pmt:attributeInfo>
						<pmt:attributeMappedName lang="en">Right argument type</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="Int"/>
						<xsd:enumeration value="UInt"/>
						<xsd:enumeration value="Long"/>
						<xsd:enumeration value="ULong"/>
						<xsd:enumeration value="Double"/>
						<xsd:enumeration value="Float"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="Operators_DivComplex" substitutionGroup="_binaryOp" type="_binaryOpComplexType">
		<xsd:annotation>
			<xsd:appinfo>
				<pmt:info lang="en">Compute the division of left child (number) by right child (number).</pmt:info>
				<pmt:mappedName lang="en">Divide (complex)</pmt:mappedName>
			</xsd:appinfo>
		</xsd:annotation>
	</xsd:element>
	
	<xsd:element name="Operators_DivVariable" substitutionGroup="_modifierOp">
		<xsd:annotation>
			<xsd:appinfo>
				<pmt:info lang="en">Compute the division of left and right numbers. Store the result in a variable.</pmt:info>
				<pmt:mappedName lang="en">Divide (result in variable)</pmt:mappedName>
				<pmt:returnType definedBy="staticType">Void</pmt:returnType>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="outResult" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="indVariables" allowEdition="False"/>
							<gui:list type="locVariables" allowEdition="False"/>
						</gui:attributeBehavior>
						<pmt:attributeMappedName lang="en">Variable</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="inArgLeft" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="indVariables" allowEdition="False"/>
							<gui:list type="envVariables" allowEdition="False"/>
							<gui:list type="locVariables" allowEdition="False"/>
							<gui:list type="allParameters" allowEdition="False"/>
							<gui:displayValue position="br" showAttr="inArgRight" delimiter="/"/>		
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en" pairedAttr="inArgLeft_Type"/>
						<pmt:attributeMappedName lang="en">Left number</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="inArgLeft_Type" use="optional">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="numericTypes" allowEdition="False"/>
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en">Type of left argument. WARNING: type must be the same as variable!</pmt:attributeInfo>
						<pmt:attributeMappedName lang="en">Left argument type</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="Int"/>
						<xsd:enumeration value="UInt"/>
						<xsd:enumeration value="Long"/>
						<xsd:enumeration value="ULong"/>
						<xsd:enumeration value="Double"/>
						<xsd:enumeration value="Float"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="inArgRight" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="indVariables" allowEdition="False"/>
							<gui:list type="envVariables" allowEdition="False"/>
							<gui:list type="locVariables" allowEdition="False"/>
							<gui:list type="allParameters" allowEdition="False"/>		
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en" pairedAttr="inArgRight_Type"/>
						<pmt:attributeMappedName lang="en">Right number</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="inArgRight_Type" use="optional">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="numericTypes" allowEdition="False"/>
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en">Type of right argument. WARNING: type must be the same as variable!</pmt:attributeInfo>
						<pmt:attributeMappedName lang="en">Right argument type</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="Int"/>
						<xsd:enumeration value="UInt"/>
						<xsd:enumeration value="Long"/>
						<xsd:enumeration value="ULong"/>
						<xsd:enumeration value="Double"/>
						<xsd:enumeration value="Float"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="Operators_ExpComplex" substitutionGroup="_unaryOp">
		<xsd:annotation>
			<xsd:appinfo>
				<pmt:info lang="en">Compute the exponential e-based function of child (number).</pmt:info>
				<pmt:mappedName lang="en">Exp (complex)</pmt:mappedName>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice minOccurs="1" maxOccurs="1">
				<xsd:annotation>
					<xsd:appinfo>
						<pmt:childType definedBy="staticType">Number</pmt:childType>
					</xsd:appinfo>
				</xsd:annotation>
				<xsd:element ref="_arithmeticOp"/>
				<xsd:element ref="_conditionOp"/>
				<xsd:element ref="_staticTk"/>
				<xsd:element ref="_callTk"/>
			</xsd:choice>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="Operators_ModComplex" substitutionGroup="_binaryOp">
		<xsd:annotation>
			<xsd:appinfo>
				<pmt:info lang="en">Compute the modulo of left child (number) by right child (number).</pmt:info>
				<pmt:mappedName lang="en">Modulo (complex)</pmt:mappedName>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence minOccurs="1" maxOccurs="1">
				<xsd:choice minOccurs="1" maxOccurs="1">
					<xsd:annotation>
						<xsd:appinfo>
							<pmt:childType definedBy="staticType">Integer</pmt:childType>
							<pmt:childBranchTag lang="en">Right number</pmt:childBranchTag>
						</xsd:appinfo>
					</xsd:annotation>
					<xsd:element ref="_arithmeticOp"/>
					<xsd:element ref="_conditionOp"/>
					<xsd:element ref="_staticTk"/>
					<xsd:element ref="_callTk"/>
				</xsd:choice>
				<xsd:choice minOccurs="1" maxOccurs="1">
					<xsd:annotation>
						<xsd:appinfo>
							<pmt:childType definedBy="staticType">Integer</pmt:childType>
							<pmt:childBranchTag lang="en">Left number</pmt:childBranchTag>
						</xsd:appinfo>
					</xsd:annotation>
					<xsd:element ref="_arithmeticOp"/>
					<xsd:element ref="_conditionOp"/>
					<xsd:element ref="_staticTk"/>
					<xsd:element ref="_callTk"/>
				</xsd:choice>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="Operators_MultComplex" substitutionGroup="_binaryOp" type="_binaryOpComplexType">
		<xsd:annotation>
			<xsd:appinfo>
				<pmt:info lang="en">Compute the multiplication of left child (number) by right child (number).</pmt:info>
				<pmt:mappedName lang="en">Multiply (complex)</pmt:mappedName>
			</xsd:appinfo>
		</xsd:annotation>
	</xsd:element>
	
	<xsd:element name="Operators_MultVariable" substitutionGroup="_modifierOp">
		<xsd:annotation>
			<xsd:appinfo>
				<pmt:info lang="en">Compute the multiplication of left number by right number. Store the result in a variable</pmt:info>
				<pmt:mappedName lang="en">Multiply (result in variable)</pmt:mappedName>
				<pmt:returnType definedBy="staticType">Void</pmt:returnType>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="outResult" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="indVariables" allowEdition="False"/>
							<gui:list type="locVariables" allowEdition="False"/>
						</gui:attributeBehavior>
						<pmt:attributeMappedName lang="en">Variable</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="inArgLeft" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="indVariables" allowEdition="False"/>
							<gui:list type="envVariables" allowEdition="False"/>
							<gui:list type="locVariables" allowEdition="False"/>
							<gui:list type="allParameters" allowEdition="False"/>
							<gui:displayValue position="br" showAttr="inArgRight" delimiter="*"/>		
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en" pairedAttr="inArgLeft_Type"/>
						<pmt:attributeMappedName lang="en">Left number</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="inArgLeft_Type" use="optional">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="numericTypes" allowEdition="False"/>
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en">Type of left argument. WARNING: type must be the same as variable!</pmt:attributeInfo>
						<pmt:attributeMappedName lang="en">Left argument type</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="Int"/>
						<xsd:enumeration value="UInt"/>
						<xsd:enumeration value="Long"/>
						<xsd:enumeration value="ULong"/>
						<xsd:enumeration value="Double"/>
						<xsd:enumeration value="Float"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="inArgRight" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="indVariables" allowEdition="False"/>
							<gui:list type="envVariables" allowEdition="False"/>
							<gui:list type="locVariables" allowEdition="False"/>
							<gui:list type="allParameters" allowEdition="False"/>		
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en" pairedAttr="inArgRight_Type"/>
						<pmt:attributeMappedName lang="en">Right number</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="inArgRight_Type" use="optional">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="numericTypes" allowEdition="False"/>
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en">Type of right argument. WARNING: type must be the same as variable!</pmt:attributeInfo>
						<pmt:attributeMappedName lang="en">Right argument type</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="Int"/>
						<xsd:enumeration value="UInt"/>
						<xsd:enumeration value="Long"/>
						<xsd:enumeration value="ULong"/>
						<xsd:enumeration value="Double"/>
						<xsd:enumeration value="Float"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="Operators_PowComplex" substitutionGroup="_binaryOp" type="_binaryOpComplexType">
		<xsd:annotation>
			<xsd:appinfo>
				<pmt:info lang="en">Compute the exponentiation of left child (number) to right child (number).</pmt:info>
				<pmt:mappedName lang="en">Exponent (complex)</pmt:mappedName>
			</xsd:appinfo>
		</xsd:annotation>
	</xsd:element>
	
	<xsd:element name="Operators_SubComplex" substitutionGroup="_binaryOp" type="_binaryOpComplexType">
		<xsd:annotation>
			<xsd:appinfo>
				<pmt:info lang="en">Compute the subtraction of right child (number) to left child (number).</pmt:info>
				<pmt:mappedName lang="en">Subtract (complex)</pmt:mappedName>
			</xsd:appinfo>
		</xsd:annotation>
	</xsd:element>
	
	<xsd:element name="Operators_SubVariable" substitutionGroup="_modifierOp">
		<xsd:annotation>
			<xsd:appinfo>
				<pmt:info lang="en">Compute the subtraction of right number to left number. Store the result in a variable.</pmt:info>
				<pmt:mappedName lang="en">Subtract (result in variable)</pmt:mappedName>
				<pmt:returnType definedBy="staticType">Void</pmt:returnType>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="outResult" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="indVariables" allowEdition="False"/>
							<gui:list type="locVariables" allowEdition="False"/>
						</gui:attributeBehavior>
						<pmt:attributeMappedName lang="en">Variable</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="inArgLeft" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="indVariables" allowEdition="False"/>
							<gui:list type="envVariables" allowEdition="False"/>
							<gui:list type="locVariables" allowEdition="False"/>
							<gui:list type="allParameters" allowEdition="False"/>
							<gui:displayValue position="br" showAttr="inArgRight" delimiter="-"/>		
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en" pairedAttr="inArgLeft_Type"/>
						<pmt:attributeMappedName lang="en">Left number</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="inArgLeft_Type" use="optional">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="numericTypes" allowEdition="False"/>
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en">Type of left argument. WARNING: type must be the same as variable!</pmt:attributeInfo>
						<pmt:attributeMappedName lang="en">Left argument type</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="Int"/>
						<xsd:enumeration value="UInt"/>
						<xsd:enumeration value="Long"/>
						<xsd:enumeration value="ULong"/>
						<xsd:enumeration value="Double"/>
						<xsd:enumeration value="Float"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="inArgRight" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="indVariables" allowEdition="False"/>
							<gui:list type="envVariables" allowEdition="False"/>
							<gui:list type="locVariables" allowEdition="False"/>
							<gui:list type="allParameters" allowEdition="False"/>		
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en" pairedAttr="inArgRight_Type"/>
						<pmt:attributeMappedName lang="en">Right number</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="inArgRight_Type" use="optional">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="numericTypes" allowEdition="False"/>
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en">Type of right argument. WARNING: type must be the same as variable!</pmt:attributeInfo>
						<pmt:attributeMappedName lang="en">Right argument type</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="Int"/>
						<xsd:enumeration value="UInt"/>
						<xsd:enumeration value="Long"/>
						<xsd:enumeration value="ULong"/>
						<xsd:enumeration value="Double"/>
						<xsd:enumeration value="Float"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	
	<xsd:element name="Operators_IsBetween" substitutionGroup="_comparisonOp">
		<xsd:annotation>
			<xsd:appinfo>
				<pmt:info lang="en">Test inclusive between on numbers.</pmt:info>
				<pmt:mappedName lang="en">Is value between?</pmt:mappedName>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="inValue" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="indVariables" allowEdition="False"/>
							<gui:list type="envVariables" allowEdition="False"/>
							<gui:list type="locVariables" allowEdition="False"/>
							<gui:list type="allParameters" allowEdition="False"/>		
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en" pairedAttr="inValue_Type"/>
						<pmt:attributeMappedName lang="en">Test number</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="inValue_Type" use="optional">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="numericTypes" allowEdition="False"/>
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en">Type of test value. WARNING: type must be the same as min and max arguments!</pmt:attributeInfo>
						<pmt:attributeMappedName lang="en">Test value type</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="Int"/>
						<xsd:enumeration value="UInt"/>
						<xsd:enumeration value="Long"/>
						<xsd:enumeration value="ULong"/>
						<xsd:enumeration value="Double"/>
						<xsd:enumeration value="Float"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="inArgLeft" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="indVariables" allowEdition="False"/>
							<gui:list type="envVariables" allowEdition="False"/>
							<gui:list type="locVariables" allowEdition="False"/>
							<gui:list type="allParameters" allowEdition="False"/>		
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en" pairedAttr="inArgLeft_Type"/>
						<pmt:attributeMappedName lang="en">Min number</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="inArgLeft_Type" use="optional">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="numericTypes" allowEdition="False"/>
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en">Type of min argument. WARNING: type must be the same as test value and max argument!</pmt:attributeInfo>
						<pmt:attributeMappedName lang="en">Min argument type</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="Int"/>
						<xsd:enumeration value="UInt"/>
						<xsd:enumeration value="Long"/>
						<xsd:enumeration value="ULong"/>
						<xsd:enumeration value="Double"/>
						<xsd:enumeration value="Float"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="inArgRight" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="indVariables" allowEdition="False"/>
							<gui:list type="envVariables" allowEdition="False"/>
							<gui:list type="locVariables" allowEdition="False"/>
							<gui:list type="allParameters" allowEdition="False"/>		
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en" pairedAttr="inArgRight_Type"/>
						<pmt:attributeMappedName lang="en">Max number</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="inArgRight_Type" use="optional">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="numericTypes" allowEdition="False"/>
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en">Type of max argument. WARNING: type must be the same as test value and min argument!</pmt:attributeInfo>
						<pmt:attributeMappedName lang="en">Max argument type</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="Int"/>
						<xsd:enumeration value="UInt"/>
						<xsd:enumeration value="Long"/>
						<xsd:enumeration value="ULong"/>
						<xsd:enumeration value="Double"/>
						<xsd:enumeration value="Float"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="Operators_IsBetweenComplex" substitutionGroup="_comparisonOp">
		<xsd:annotation>
			<xsd:appinfo>
				<pmt:info lang="en">Test inclusive between on children (numbers).</pmt:info>
				<pmt:mappedName lang="en">Is value between? (complex)</pmt:mappedName>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence minOccurs="1" maxOccurs="1">
				<xsd:choice> <!-- Value -->
					<xsd:annotation>
						<xsd:appinfo>
							<pmt:childType definedBy="staticType">Number</pmt:childType>
							<pmt:childBranchTag lang="en">Test value</pmt:childBranchTag>
						</xsd:appinfo>
					</xsd:annotation>
					<xsd:element ref="_arithmeticOp"/>
					<xsd:element ref="_conditionOp"/>
					<xsd:element ref="_staticTk"/>
					<xsd:element ref="_callTk"/>
				</xsd:choice>
				<xsd:choice> <!-- Min -->
					<xsd:annotation>
						<xsd:appinfo>
							<pmt:childType definedBy="staticType">Number</pmt:childType>
							<pmt:childBranchTag lang="en">Min value</pmt:childBranchTag>
						</xsd:appinfo>
					</xsd:annotation>
					<xsd:element ref="_arithmeticOp"/>
					<xsd:element ref="_conditionOp"/>
					<xsd:element ref="_staticTk"/>
					<xsd:element ref="_callTk"/>
				</xsd:choice>
				<xsd:choice> <!-- Max -->
					<xsd:annotation>
						<xsd:appinfo>
							<pmt:childType definedBy="staticType">Number</pmt:childType>
							<pmt:childBranchTag lang="en">Max value</pmt:childBranchTag>
						</xsd:appinfo>
					</xsd:annotation>
					<xsd:element ref="_arithmeticOp"/>
					<xsd:element ref="_conditionOp"/>
					<xsd:element ref="_staticTk"/>
					<xsd:element ref="_callTk"/>
				</xsd:choice>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="Operators_IsEqual" substitutionGroup="_comparisonOp">
		<xsd:annotation>
			<xsd:appinfo>
				<pmt:info lang="en">Test is left argument is equal to right argument.</pmt:info>
				<pmt:mappedName lang="en">Is equal?</pmt:mappedName>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="inArgLeft" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="indVariables" allowEdition="False"/>
							<gui:list type="envVariables" allowEdition="False"/>
							<gui:list type="locVariables" allowEdition="False"/>
							<gui:list type="allParameters" allowEdition="False"/>
							<gui:displayValue position="br" showAttr="inArgRight" delimiter="=?"/>		
						</gui:attributeBehavior>	
						<pmt:attributeInfo lang="en" pairedAttr="inArgLeft_Type"/>
						<pmt:attributeMappedName lang="en">Left argument</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="inArgLeft_Type" use="optional">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="numericTypes" allowEdition="False"/>
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en">Type of left argument. WARNING: type must be the same as right argument!</pmt:attributeInfo>
						<pmt:attributeMappedName lang="en">Left argument type</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="Int"/>
						<xsd:enumeration value="UInt"/>
						<xsd:enumeration value="Long"/>
						<xsd:enumeration value="ULong"/>
						<xsd:enumeration value="Double"/>
						<xsd:enumeration value="Float"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="inArgRight" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="indVariables" allowEdition="False"/>
							<gui:list type="envVariables" allowEdition="False"/>
							<gui:list type="locVariables" allowEdition="False"/>
							<gui:list type="allParameters" allowEdition="False"/>		
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en" pairedAttr="inArgRight_Type"/>
						<pmt:attributeMappedName lang="en">Right number</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="inArgRight_Type" use="optional">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="numericTypes" allowEdition="False"/>
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en">Type of right argument. WARNING: type must be the same as test left argument!</pmt:attributeInfo>
						<pmt:attributeMappedName lang="en">Right argument type</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="Int"/>
						<xsd:enumeration value="UInt"/>
						<xsd:enumeration value="Long"/>
						<xsd:enumeration value="ULong"/>
						<xsd:enumeration value="Double"/>
						<xsd:enumeration value="Float"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="Operators_IsEqualComplex" substitutionGroup="_comparisonOp" type="_comparisonOpComplexType">
		<xsd:annotation>
			<xsd:appinfo>
				<pmt:info lang="en">Test is left child is equal to right child.</pmt:info>
				<pmt:mappedName lang="en">Is equal? (complex)</pmt:mappedName>
			</xsd:appinfo>
		</xsd:annotation>
	</xsd:element>
	
	<xsd:element name="Operators_IsGreater" substitutionGroup="_comparisonOp">
		<xsd:annotation>
			<xsd:appinfo>
				<pmt:info lang="en">Test is left argument is greater than right argument.</pmt:info>
				<pmt:mappedName lang="en">Is greater?</pmt:mappedName>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="inArgLeft" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="indVariables" allowEdition="False"/>
							<gui:list type="envVariables" allowEdition="False"/>
							<gui:list type="locVariables" allowEdition="False"/>
							<gui:list type="allParameters" allowEdition="False"/>
							<gui:displayValue position="br" showAttr="inArgRight" delimiter="&gt;"/>			
						</gui:attributeBehavior>	
						<pmt:attributeInfo lang="en" pairedAttr="inArgLeft_Type"/>
						<pmt:attributeMappedName lang="en">Left argument</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="inArgLeft_Type" use="optional">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="numericTypes" allowEdition="False"/>
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en">Type of left argument. WARNING: type must be the same as right argument!</pmt:attributeInfo>
						<pmt:attributeMappedName lang="en">Left argument type</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="Int"/>
						<xsd:enumeration value="UInt"/>
						<xsd:enumeration value="Long"/>
						<xsd:enumeration value="ULong"/>
						<xsd:enumeration value="Double"/>
						<xsd:enumeration value="Float"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="inArgRight" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="indVariables" allowEdition="False"/>
							<gui:list type="envVariables" allowEdition="False"/>
							<gui:list type="locVariables" allowEdition="False"/>
							<gui:list type="allParameters" allowEdition="False"/>		
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en" pairedAttr="inArgRight_Type"/>
						<pmt:attributeMappedName lang="en">Right number</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="inArgRight_Type" use="optional">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="numericTypes" allowEdition="False"/>
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en">Type of right argument. WARNING: type must be the same as test left argument!</pmt:attributeInfo>
						<pmt:attributeMappedName lang="en">Right argument type</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="Int"/>
						<xsd:enumeration value="UInt"/>
						<xsd:enumeration value="Long"/>
						<xsd:enumeration value="ULong"/>
						<xsd:enumeration value="Double"/>
						<xsd:enumeration value="Float"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="Operators_IsGreaterComplex" substitutionGroup="_comparisonOp" type="_comparisonOpComplexType">
		<xsd:annotation>
			<xsd:appinfo>
				<pmt:info lang="en">Test is left child is greater than right child.</pmt:info>
				<pmt:mappedName lang="en">Is greater? (complex)</pmt:mappedName>
			</xsd:appinfo>
		</xsd:annotation>
	</xsd:element>
	
	<xsd:element name="Operators_IsGreaterOrEqual" substitutionGroup="_comparisonOp">
		<xsd:annotation>
			<xsd:appinfo>
				<pmt:info lang="en">Test is left argument is greater or equal to right argument.</pmt:info>
				<pmt:mappedName lang="en">Is greater or equal?</pmt:mappedName>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="inArgLeft" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="indVariables" allowEdition="False"/>
							<gui:list type="envVariables" allowEdition="False"/>
							<gui:list type="locVariables" allowEdition="False"/>
							<gui:list type="allParameters" allowEdition="False"/>
							<gui:displayValue position="br" showAttr="inArgRight" delimiter="&gt;="/>			
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en" pairedAttr="inArgLeft_Type"/>
						<pmt:attributeMappedName lang="en">Left argument</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="inArgLeft_Type" use="optional">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="numericTypes" allowEdition="False"/>
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en">Type of left argument. WARNING: type must be the same as right argument!</pmt:attributeInfo>
						<pmt:attributeMappedName lang="en">Left argument type</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="Int"/>
						<xsd:enumeration value="UInt"/>
						<xsd:enumeration value="Long"/>
						<xsd:enumeration value="ULong"/>
						<xsd:enumeration value="Double"/>
						<xsd:enumeration value="Float"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="inArgRight" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="indVariables" allowEdition="False"/>
							<gui:list type="envVariables" allowEdition="False"/>
							<gui:list type="locVariables" allowEdition="False"/>
							<gui:list type="allParameters" allowEdition="False"/>		
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en" pairedAttr="inArgRight_Type"/>
						<pmt:attributeMappedName lang="en">Right number</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="inArgRight_Type" use="optional">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="numericTypes" allowEdition="False"/>
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en">Type of right argument. WARNING: type must be the same as test left argument!</pmt:attributeInfo>
						<pmt:attributeMappedName lang="en">Right argument type</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="Int"/>
						<xsd:enumeration value="UInt"/>
						<xsd:enumeration value="Long"/>
						<xsd:enumeration value="ULong"/>
						<xsd:enumeration value="Double"/>
						<xsd:enumeration value="Float"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="Operators_IsGreaterOrEqualComplex" substitutionGroup="_comparisonOp" type="_comparisonOpComplexType">
		<xsd:annotation>
			<xsd:appinfo>
				<pmt:info lang="en">Test is left child is greater or equal to right child.</pmt:info>
				<pmt:mappedName lang="en">Is greater or equal? (complex)</pmt:mappedName>
			</xsd:appinfo>
		</xsd:annotation>
	</xsd:element>
	
	<xsd:element name="Operators_IsLess" substitutionGroup="_comparisonOp">
		<xsd:annotation>
			<xsd:appinfo>
				<pmt:info lang="en">Test is left argument is less than right argument.</pmt:info>
				<pmt:mappedName lang="en">Is less?</pmt:mappedName>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="inArgLeft" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="indVariables" allowEdition="False"/>
							<gui:list type="envVariables" allowEdition="False"/>
							<gui:list type="locVariables" allowEdition="False"/>
							<gui:list type="allParameters" allowEdition="False"/>
							<gui:displayValue position="br" showAttr="inArgRight" delimiter="&lt;"/>		
						</gui:attributeBehavior>	
						<pmt:attributeInfo lang="en" pairedAttr="inArgLeft_Type"/>
						<pmt:attributeMappedName lang="en">Left argument</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="inArgLeft_Type" use="optional">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="numericTypes" allowEdition="False"/>
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en">Type of left argument. WARNING: type must be the same as right argument!</pmt:attributeInfo>
						<pmt:attributeMappedName lang="en">Left argument type</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="Int"/>
						<xsd:enumeration value="UInt"/>
						<xsd:enumeration value="Long"/>
						<xsd:enumeration value="ULong"/>
						<xsd:enumeration value="Double"/>
						<xsd:enumeration value="Float"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="inArgRight" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="indVariables" allowEdition="False"/>
							<gui:list type="envVariables" allowEdition="False"/>
							<gui:list type="locVariables" allowEdition="False"/>
							<gui:list type="allParameters" allowEdition="False"/>		
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en" pairedAttr="inArgRight_Type"/>
						<pmt:attributeMappedName lang="en">Right number</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="inArgRight_Type" use="optional">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="numericTypes" allowEdition="False"/>
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en">Type of right argument. WARNING: type must be the same as test left argument!</pmt:attributeInfo>
						<pmt:attributeMappedName lang="en">Right argument type</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="Int"/>
						<xsd:enumeration value="UInt"/>
						<xsd:enumeration value="Long"/>
						<xsd:enumeration value="ULong"/>
						<xsd:enumeration value="Double"/>
						<xsd:enumeration value="Float"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="Operators_IsLessComplex" substitutionGroup="_comparisonOp" type="_comparisonOpComplexType">
		<xsd:annotation>
			<xsd:appinfo>
				<pmt:info lang="en">Test is left child is less than right child.</pmt:info>
				<pmt:mappedName lang="en">Is less? (complex)</pmt:mappedName>
			</xsd:appinfo>
		</xsd:annotation>
	</xsd:element>
	
	<xsd:element name="Operators_IsLessOrEqual" substitutionGroup="_comparisonOp">
		<xsd:annotation>
			<xsd:appinfo>
				<pmt:info lang="en">Test is left argument is less or equal to right argument.</pmt:info>
				<pmt:mappedName lang="en">Is less or equal?</pmt:mappedName>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="inArgLeft" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="indVariables" allowEdition="False"/>
							<gui:list type="envVariables" allowEdition="False"/>
							<gui:list type="locVariables" allowEdition="False"/>
							<gui:list type="allParameters" allowEdition="False"/>
							<gui:displayValue position="br" showAttr="inArgRight" delimiter="&lt;="/>		
						</gui:attributeBehavior>	
						<pmt:attributeInfo lang="en" pairedAttr="inArgLeft_Type"/>
						<pmt:attributeMappedName lang="en">Left argument</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="inArgLeft_Type" use="optional">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="numericTypes" allowEdition="False"/>
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en">Type of left argument. WARNING: type must be the same as right argument!</pmt:attributeInfo>
						<pmt:attributeMappedName lang="en">Left argument type</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="Int"/>
						<xsd:enumeration value="UInt"/>
						<xsd:enumeration value="Long"/>
						<xsd:enumeration value="ULong"/>
						<xsd:enumeration value="Double"/>
						<xsd:enumeration value="Float"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="inArgRight" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="indVariables" allowEdition="False"/>
							<gui:list type="envVariables" allowEdition="False"/>
							<gui:list type="locVariables" allowEdition="False"/>
							<gui:list type="allParameters" allowEdition="False"/>		
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en" pairedAttr="inArgRight_Type"/>
						<pmt:attributeMappedName lang="en">Right number</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="inArgRight_Type" use="optional">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="numericTypes" allowEdition="False"/>
						</gui:attributeBehavior>
						<pmt:attributeInfo lang="en">Type of right argument. WARNING: type must be the same as test left argument!</pmt:attributeInfo>
						<pmt:attributeMappedName lang="en">Right argument type</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
				<xsd:simpleType>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="Int"/>
						<xsd:enumeration value="UInt"/>
						<xsd:enumeration value="Long"/>
						<xsd:enumeration value="ULong"/>
						<xsd:enumeration value="Double"/>
						<xsd:enumeration value="Float"/>
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="Operators_IsLessOrEqualComplex" substitutionGroup="_comparisonOp" type="_comparisonOpComplexType">
		<xsd:annotation>
			<xsd:appinfo>
				<pmt:info lang="en">Test is left child is less or equal to right child.</pmt:info>
				<pmt:mappedName lang="en">Is less or equal? (complex)</pmt:mappedName>
			</xsd:appinfo>
		</xsd:annotation>
	</xsd:element>
	
	
	<xsd:element name="Operators_And" substitutionGroup="_logicalOp" >
		<xsd:annotation>
			<xsd:appinfo>
				<pmt:info lang="en">Compute a logical AND between left and right booleans.</pmt:info>
				<pmt:mappedName lang="en">AND</pmt:mappedName>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="inArgLeft" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="indVariables" allowEdition="False"/>
							<gui:list type="envVariables" allowEdition="False"/>
							<gui:list type="locVariables" allowEdition="False"/>
							<gui:list type="allParameters" allowEdition="False"/>
							<gui:displayValue position="br" showAttr="inArgRight" delimiter="&amp;"/>		
						</gui:attributeBehavior>
						<pmt:attributeMappedName lang="en">Left boolean</pmt:attributeMappedName>
						<pmt:attributeType>Bool</pmt:attributeType>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="inArgRight" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="indVariables" allowEdition="False"/>
							<gui:list type="envVariables" allowEdition="False"/>
							<gui:list type="locVariables" allowEdition="False"/>
							<gui:list type="allParameters" allowEdition="False"/>		
						</gui:attributeBehavior>
						<pmt:attributeMappedName lang="en">Right boolean</pmt:attributeMappedName>
						<pmt:attributeType>Bool</pmt:attributeType>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="Operators_AndComplex" substitutionGroup="_logicalOp" type="_logicalOpComplexType">
		<xsd:annotation>
			<xsd:appinfo>
				<pmt:info lang="en">Compute a logical AND between children (booleans).</pmt:info>
				<pmt:mappedName lang="en">AND (complex)</pmt:mappedName>
			</xsd:appinfo>
		</xsd:annotation>
	</xsd:element>
	
	<xsd:element name="Operators_Not" substitutionGroup="_logicalOp" >
		<xsd:annotation>
			<xsd:appinfo>
				<pmt:info lang="en">Compute a logical NOT on boolean.</pmt:info>
				<pmt:mappedName lang="en">NOT</pmt:mappedName>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="inArg" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="indVariables" allowEdition="False"/>
							<gui:list type="envVariables" allowEdition="False"/>
							<gui:list type="locVariables" allowEdition="False"/>
							<gui:list type="allParameters" allowEdition="False"/>
							<gui:displayValue position="br"/>		
						</gui:attributeBehavior>
						<pmt:attributeMappedName lang="en">Boolean</pmt:attributeMappedName>
						<pmt:attributeType>Bool</pmt:attributeType>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="Operators_NotComplex" substitutionGroup="_logicalOp">
		<xsd:annotation>
			<xsd:appinfo>
				<pmt:info lang="en">Compute a logical NOT on child (boolean).</pmt:info>
				<pmt:mappedName lang="en">NOT (complex)</pmt:mappedName>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence minOccurs="1" maxOccurs="1">
				<xsd:choice>
					<xsd:element ref="_booleanOp"/>
					<xsd:element ref="_conditionOp"/>
					<xsd:element ref="_staticTk"/>
					<xsd:element ref="_callTk"/>
				</xsd:choice>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="Operators_Or" substitutionGroup="_logicalOp" >
		<xsd:annotation>
			<xsd:appinfo>
				<pmt:info lang="en">Compute a logical OR between left and right booleans.</pmt:info>
				<pmt:mappedName lang="en">OR</pmt:mappedName>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="inArgLeft" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="indVariables" allowEdition="False"/>
							<gui:list type="envVariables" allowEdition="False"/>
							<gui:list type="locVariables" allowEdition="False"/>
							<gui:list type="allParameters" allowEdition="False"/>
							<gui:displayValue position="br" showAttr="inArgRight" delimiter="|"/>			
						</gui:attributeBehavior>
						<pmt:attributeMappedName lang="en">Left boolean</pmt:attributeMappedName>
						<pmt:attributeType>Bool</pmt:attributeType>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="inArgRight" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="indVariables" allowEdition="False"/>
							<gui:list type="envVariables" allowEdition="False"/>
							<gui:list type="locVariables" allowEdition="False"/>
							<gui:list type="allParameters" allowEdition="False"/>		
						</gui:attributeBehavior>
						<pmt:attributeMappedName lang="en">Right boolean</pmt:attributeMappedName>
						<pmt:attributeType>Bool</pmt:attributeType>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="Operators_OrComplex" substitutionGroup="_logicalOp" type="_logicalOpComplexType">
		<xsd:annotation>
			<xsd:appinfo>
				<pmt:info lang="en">Compute a logical OR between children (booleans).</pmt:info>
				<pmt:mappedName lang="en">OR (complex)</pmt:mappedName>
			</xsd:appinfo>
		</xsd:annotation>
	</xsd:element>
	
	
	<xsd:element name="Operators_ConcatComplex" substitutionGroup="_stringOp">
		<xsd:annotation>
			<xsd:appinfo>
				<pmt:info lang="en">Concatenate right child (string) to left child (string).</pmt:info>
				<pmt:mappedName lang="en">Concatenate (complex)</pmt:mappedName>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence minOccurs="2" maxOccurs="unbounded">
				<xsd:choice>
					<xsd:element ref="_conditionOp"/>
					<xsd:element ref="_stringOp"/>
					<xsd:element ref="_tokenBase"/>
				</xsd:choice>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="Operators_ConcatVariable" substitutionGroup="_modifierOp">
		<xsd:annotation>
			<xsd:appinfo>
				<pmt:info lang="en">Concatenate right string to left string. Store the result in a variable.</pmt:info>
				<pmt:mappedName lang="en">Concatenate (result in variable)</pmt:mappedName>
				<pmt:returnType definedBy="staticType">Void</pmt:returnType>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:attribute name="outResult" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="indVariables" allowEdition="False"/>
							<gui:list type="locVariables" allowEdition="False"/>
						</gui:attributeBehavior>
						<pmt:attributeMappedName lang="en">Variable</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="inArgLeft" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="indVariables" allowEdition="False"/>
							<gui:list type="envVariables" allowEdition="False"/>
							<gui:list type="locVariables" allowEdition="False"/>
							<gui:list type="allParameters" allowEdition="False"/>
							<gui:displayValue position="br" showAttr="inArgRight" delimiter="&lt;"/>		
						</gui:attributeBehavior>
						<pmt:attributeMappedName lang="en">Left string</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="inArgRight" type="xsd:string" use="required">
				<xsd:annotation>
					<xsd:appinfo>
						<gui:attributeBehavior>
							<gui:list type="indVariables" allowEdition="False"/>
							<gui:list type="envVariables" allowEdition="False"/>
							<gui:list type="locVariables" allowEdition="False"/>
							<gui:list type="allParameters" allowEdition="False"/>		
						</gui:attributeBehavior>
						<pmt:attributeMappedName lang="en">Right string</pmt:attributeMappedName>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="Operators_NPV" substitutionGroup="_unaryOp">
		<xsd:annotation>
			<xsd:appinfo>
				<pmt:info lang="en">Compute the Nearest Present Value of the child (number).</pmt:info>
				<pmt:mappedName lang="en">NPV</pmt:mappedName>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="_unaryOpComplexType">
					<xsd:attribute name="rate" type="xsd:string" use="required">
						<xsd:annotation>
							<xsd:appinfo>
								<gui:attributeBehavior>
									<gui:list type="indVariables" allowEdition="False"/>
									<gui:list type="envVariables" allowEdition="False"/>
									<gui:list type="locVariables" allowEdition="False"/>
									<gui:list type="allParameters" allowEdition="False"/>	
									<gui:displayValue position="br"/>	
								</gui:attributeBehavior>
								<pmt:attributeMappedName lang="en">Actualization rate</pmt:attributeMappedName>
								<pmt:attributeType>Double</pmt:attributeType>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:attribute>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

</xsd:schema>
